format pe64 GUI 5.0
entry start
stack 80000h, 80000h

include 'win64a.inc'
include '..\..\..\Include\sdl3.inc'
include '..\..\..\Templates\part_equates.fasm'
include '..\..\..\Templates\part_macros.fasm'

SCREEN_WIDTH=960			; Screen width is less than the textcolumns * 16, because of the extra column for scrolling
SCREEN_HEIGHT=560
SCREEN_PIXELSIZE=4
SCREEN_LINESIZE=SCREEN_WIDTH*SCREEN_PIXELSIZE
GC_Screen_TextColumns = 60 + 1  ;one extra column at the far right for scrolling
GC_Screen_TextRows = 35 + 1     ;one extra row at the bottom for scrolling
GC_Screen_TextSize = GC_Screen_TextColumns * GC_Screen_TextRows
Graphics_Tile_Width = 16
Graphics_Tile_Height = 16
Graphics_ScreenDIMx = (GC_Screen_TextColumns - 1) * Graphics_Tile_Width		;60x16=960   35x16=560    -> 60x35 16x16 chars.  (960x540 = 16:9 resolution)
Graphics_ScreenDIMy = (GC_Screen_TextRows - 1) * Graphics_Tile_Height
Graphics_ScreenPixelSize = 4
Graphics_ScreenLineSize = Graphics_ScreenDIMx * Graphics_ScreenPixelSize
Graphics_ScreenSize = Graphics_ScreenDIMx * Graphics_ScreenDIMy * Graphics_ScreenPixelSize
TEXT1_FONT32 = 0
TEXT1_FONT256 = 1
TEXT4_FONT1024 = 2
PIXEL4_BITMAP = 3

; *** GENERATED EQUATES CODE ***
;GC_INSERTIONPOINT_EQUATES

section '.text' code readable executable
start:
  push	rbp
  mov	rbp, rsp
  mov   [main_rbp], rbp

  invoke kernel32_GetStdHandle, STD_OUTPUT_HANDLE
  mov	[GetStdHandle_outputhandle], rax

  invoke kernel32_GetStdHandle, STD_INPUT_HANDLE
  mov	[GetStdHandle_inputhandle], rax

  invoke kernel32_GetProcessHeap
  mov	[processHeapHandle], rax

  mov	rax, 4 * 1024 * 1024
  mov	[variableSpaceSize], rax
  invoke kernel32_HeapAlloc, [processHeapHandle], HEAP_ZERO_MEMORY, [variableSpaceSize]
  mov	[variableSpacePointer], rax
  mov	[variableSpaceNeedle], rax

  mov   rax, [indexSpaceNrElements]
  mov   rdx, GC_INDEXSPACE_ROWSIZE
  mul   rdx
  invoke kernel32_HeapAlloc, [processHeapHandle], HEAP_ZERO_MEMORY, rax
  mov	[indexSpacePointer], rax
  mov	[indexSpaceMax], rax
  mov   [indexSpaceLevel], rax

  mov   rax, [referenceSpaceNrElements]
  mov   rdx, G_REFCOUNT_LINKED_LIST_ROWSIZE
  mul   rdx
  invoke kernel32_HeapAlloc, [processHeapHandle], HEAP_ZERO_MEMORY, rax
  mov	[referenceSpacePointer], rax
  mov	[referenceSpaceMax], rax
  mov	[referenceSpaceLevel], rax


; Set the CurrentExeDir as FixedString at position 0 (zero).
  invoke kernel32_GetModuleFileNameA, 0, currentExeDirChars, 256
  mov	rcx, currentExeDirChars
  call	StringLength    ; rax stringlength
  mov   r8, currentExeDirChars
  mov   rcx, rax
.currentExeDirloop:
  mov   al, byte [r8+rcx]
  cmp   al, '\'
  je    .currentExeDirExitloop
  cmp   al, '/'
  je    .currentExeDirExitloop
  mov   byte [r8+rcx], 0
  dec   rcx
  jnz   .currentExeDirloop
  mov   byte [r8], 0
.currentExeDirExitloop:
  lea   rcx, [currentExeDirChars]   ; index 0
  call  AddFixedString
  lea   rcx, [bool_true_tostring]   ; index 1
  call  AddFixedString
  lea   rcx, [bool_false_tostring]  ; index 2
  call  AddFixedString


; *** GENERATED MAIN CODE ***
;GC_INSERTIONPOINT_MAIN
; *** END MAIN CODE ***


; *** Print the maximum memory used
  lea	rax, [memchecker_message]
  call	PrintScreenString
  mov	rax, [variableSpaceNeedle]
  sub	rax, [variableSpacePointer]
  mov	rcx, 10
  call	PrintNumber

  lea   rcx, [indexchecker_message]
  mov   rdx, [indexSpaceMax]
  sub   rdx, [indexSpacePointer]
  mov   r8, GC_INDEXSPACE_ROWSIZE
  mov   rax, rdx
  xor   edx, edx
  div   r8
  mov   rdx, rax
  mov   r8, [indexSpaceNrElements]
  sub   rsp, 20h
  call  [msvcrt_printf]
  add   rsp, 20h

  lea   rcx, [refchecker_message]
  mov   rdx, [referenceSpaceMax]
  sub   rdx, [referenceSpacePointer]
  mov   r8, G_REFCOUNT_LINKED_LIST_ROWSIZE
  mov   rax, rdx
  xor   edx, edx
  div   r8
  mov   rdx, rax
  mov   r8, [referenceSpaceNrElements]
  sub   rsp, 20h
  call  [msvcrt_printf]
  add   rsp, 20h

; *** Print ' leak!' in case of a memory leak.
  mov	rax, [indexSpacePointer]
  sub	rax, GC_INDEXSPACE_ROWSIZE
.loop:
  add	rax, GC_INDEXSPACE_ROWSIZE
  cmp	qword [rax], 0
  je	.endloop
  mov	rdx, qword [rax+GC_INDEXSPACE_SIZE_OFFSET]
  cmp	rdx, 0
  je	.loop
  mov	rdx, qword [rax+GC_INDEXSPACE_NRREFS_OFFSET]
  cmp	rdx, 0
  je	.loop
  lea	rax, [leak_message]
  call	PrintScreenString
.endloop:

assert_exitpoint:
  invoke kernel32_HeapFree, [processHeapHandle], 0, [referenceSpacePointer]
  invoke kernel32_HeapFree, [processHeapHandle], 0, [indexSpacePointer]
  invoke kernel32_HeapFree, [processHeapHandle], 0, [variableSpacePointer]


  mov	rsp, rbp
  invoke kernel32_ExitProcess, 0
  pop	rbp
  ret



; *** GENERATED PROCEDURES (GROUND FUNCTIONS AND CLASSES) ***
;GC_INSERTIONPOINT_PROCEDURES
; *** END PROCEDURES ***


include '..\..\..\Templates\part_memory.fasm'


PrintScreenString:
;rax = string ptr
  push	r12 r13 r15
  mov	r13, rax
.nextChar:
  xor	eax, eax
  mov	al, [r13]
  cmp	al, 0
  jz	.end
  cmp	al, 13
  jz	.incChar
  cmp	al, 10
  jz	.incChar
  mov	r12, rax
  mov	rax, [cursor_y]
  mov	ecx, GC_Screen_TextColumns
  mul	ecx
  add	rax, [cursor_x]
  add	rax, [screentext1_p]
  mov	[rax], r12b
  mov	rax, r12
.incChar:
  call	CalculateNextCursorPosition
  inc	r13
  jmp	.nextChar
.end:
  pop	r15 r13 r12
  ret


PrintScreenColorString:
;rax = string ptr
;r8 = color (byte)
  push	r12 r13 r15
  mov	r15, [font32_charcolor_p]
  mov	r13, rax
.nextChar:
  xor	eax, eax
  mov	al, [r13]
  cmp	al, 0
  jz	.end
  cmp	al, 13
  jz	.incChar
  cmp	al, 10
  jz	.incChar
  mov	r12, rax
  mov	rax, [cursor_y]
  mov	ecx, GC_Screen_TextColumns
  mul	ecx
  add	rax, [cursor_x]
  mov	[r15+rax], r8b
  add	rax, [screentext1_p]
  mov	[rax], r12b
  mov	rax, r12
.incChar:
  call	CalculateNextCursorPosition
  inc	r13
  jmp	.nextChar
.end:
  pop	r15 r13 r12
  ret


CalculateNextCursorPosition:
;al = the last character printed
  push	r15
  mov	rcx, [cursor_x]
  mov	rdx, [cursor_y]
  cmp	al, 13 ;\r
  jne	@F
  mov	ecx, 0
  jmp	.exit
@@:
  cmp	al, 10 ;\n
  jne	@F
  inc	edx
  jmp	.exit
@@:
  inc	ecx
.exit:
  cmp	ecx, GC_Screen_TextColumns-1
  jl	@F
  sub	ecx, GC_Screen_TextColumns-1
  inc	edx
@@:
  cmp	edx, GC_Screen_TextRows-1
  jl	@F
; scroll the entire screen.
  push	rsi rdi rcx
  mov	rdi, [screentext1_p]
  mov	rsi, rdi
  add	rsi, GC_Screen_TextColumns
  mov	ecx, GC_Screen_TextSize - GC_Screen_TextColumns
  rep	movsb
  mov	al, ' '
  mov	rdi, [screentext1_p]
  add	rdi, GC_Screen_TextSize - GC_Screen_TextColumns
  mov	rcx, GC_Screen_TextColumns
  rep	stosb
  pop	rcx rdi rsi
  dec	edx
@@:
  mov	[cursor_x], rcx
  mov	[cursor_y], rdx
  pop	r15
  ret


ReadChar:
  push	rbp             ; fastcall 16-byte stack alignment
  lea	rax, [tmpCharSpace]
  mov	r8, 1
  invoke kernel32_ReadFile, [GetStdHandle_inputhandle], rax, r8, ResultBytesRead, NULL
  pop	rbp
  ret


include '..\..\..\Templates\part_string.fasm'
include '..\..\..\Templates\part_utils.fasm'
include '..\..\..\Templates\part_hardcoded_library.fasm'


_f_colorprint:
  push  rbp
  mov   rbp, rsp
  push	r8
  mov   rax, qword [rbp+G_PARAMETER2]
  call  GetMemoryPointerFromIndex
  mov   r8, qword [rbp+G_PARAMETER1]
  call	PrintScreenColorString
  pop	r8
  mov   rsp, rbp
  pop   rbp
  ret   G_STACKSPACE_2_PARAM


DrawAllCRTLines:
  push	r12 r11 r13
  xor	r12d, r12d
  mov	r13, [screenmode]
.loop:
  mov	rcx, r12
  mov	rax, [next_copperline]
  cmp	rax, rcx  ; should we call the copper function? 
  jne	@F
  mov	rax, [user_copper_p]
  cmp	eax, 0
  jz	@F
  push	rbp
  mov	rbp, [main_rbp]
  push  qword 0          ; Keep 16-byte stack alignment! (for win32)
  mov   rax, rcx		; the copperline in the first parameter
  push  rax
  mov   rax, rbp
  push  rax
  xor   eax, eax
  push  rax
  mov	rax, [user_copper_p]
  call	rax
  pop	rbp
@@:
  mov	rcx, r12

  cmp	r13d, 2
  je	.mode2
  cmp	r13d, 1
  je	.mode1
  call	DrawCRTLine_TEXT1_FONT32
  jmp	.aftermode
.mode1:
  call	DrawCRTLine_TEXT1_FONT256
  jmp	.aftermode
.mode2:
  call	DrawCRTLine_TEXT4_FONT1024
.aftermode:
  inc	r12d
  cmp	r12d, SCREEN_HEIGHT
  jnz	.loop
  pop	r13 r11 r12
  ret


; FONT32 means 32 bytes per character. Every character is 16x16 pixels and 2x16 bytes, two bytes for every horizontal row. So 2 colors are possible.
; Why are multiple colors per character possible? Because there is a font32_charcolor_p, which contains color information for the character. A value of $6e will give the
; background the color 6 (blue) and the foreground pixel the value $e (which is light blue).

DrawCRTLine_TEXT1_FONT32:
;rcx = y position to draw (yscroll not added yet)
  push	rbp rsi rdi r11 r12 r13 r14 r15 rbx
  mov	rbp, rsp
  sub	rsp, 0x10

  mov	rax, SCREEN_WIDTH*4
  mul	rcx
  add	rax, [bg_image_p]
  mov	[rbp-8], rax        ; pointer naar bg_image_p op y positie is nu berekend.

  mov	r15, [font32_charcolor_p]
  mov	rdi, [pixels_p]
  mov	r9, rcx
  mov	rax, SCREEN_WIDTH*4
  mul	rcx
  add	rdi, rax
; rdi is the destination in the pixels_p

  mov	rax, [yscroll]
  add	r9, rax				; r9 = beam y-position with yscroll added

; we delen door 16 om de screentext character te kunnen bepalen.
  mov	rax, r9
  shr	rax, 4
  mov	rcx, GC_Screen_TextColumns
  mul	rcx
  mov	r15, rax
  add	rax, [screentext1_p]
  add	r15, [font32_charcolor_p]
  mov	r10, rax			; r10 = ScreenTextPtr offset our character
  and	r9d, 0fh			; r9 is the amount of y pixels within the character down.

  mov	rdx, [rbp-8]		; entering innerloop area, rdx can be used and is filled with the bg_image_p

  xor	r14d, r14d
  mov	r8, [xscroll]
.loop:
  mov	rsi, [font32_p]
  xor	eax, eax
  mov	al, [r10]			; r10 = ScreenTextPtr offset our character

  cmp	al, 0xff			; special bg_image character
  jne	.no_special_bg_character
.special_bg_character_loop:
  mov	eax, dword [rdx]
  mov	dword [rdi], eax
  add	rdi, 4
  add	rdx, 4
  inc	r14d
  cmp	r14d, SCREEN_WIDTH
  jz	.exit_loop
  inc	r8d					; next pixel
  cmp	r8d, 16
  jnz	.special_bg_character_loop
  jmp	.afterSpecialBgImageCharHandled
.no_special_bg_character:

  shl	rax, 5				; each character is 32 bytes
  add	rsi, rax

  mov	rax, r9				; add the y-offset(r9)
  shl	rax, 1
  add	rsi, rax

; prefill the color of no-pixel and color of pixel
  xor	eax, eax

  mov	al, [r15]
  and	al, 0fh
  mov	r13, [colortable_p]
  mov	r12d, [r13+rax*4]	; r12d = color of pixel

  xor	eax, eax
  mov	al, [r15]
  and	al, 0f0h
  shr	al, 4
  mov	ebx, [r13+rax*4]	; ebx = color of no-pixel

.samechar_loop:
  xor	eax, eax
  mov	ax, [rsi]			; all bits of the line in ax

  mov	rcx, r8				; x-offset(r8)
  neg	ecx
  add	ecx, 15
  mov	r13, 1
  shl	r13, cl
  test	ax, r13w
  jz	.backgroundcolor
  mov	eax, r12d
  jmp	.setColor
.backgroundcolor:
  mov	eax, ebx
.setColor:
  mov	[rdi], eax
  add	rdi, 4
  add	rdx, 4			; next pixel in bg_image
  inc	r14d
  cmp	r14d, SCREEN_WIDTH
  jz	.exit_loop
  inc	r8d					; next pixel
  cmp	r8d, 16
  jnz	.samechar_loop
.afterSpecialBgImageCharHandled:
  xor	r8d, r8d
  inc	r10					; goto the next screencharacter 
  inc	r15
  jmp	.loop
.exit_loop:
  mov	rsp, rbp
  pop	rbx r15 r14 r13 r12 r11 rdi rsi rbp
  ret


; You will not see the font32_charcolor_p used in TEXT1_FONT256, because the colortable_p contains the color information for each byte. The byte is an index for this colortable_p.
DrawCRTLine_TEXT1_FONT256:
;rcx = y position to draw (yscroll not added yet)
  push	rbp
  mov	rbp, rsp
  push  rsi rdi r11 r12 r13
  mov	rdi, [pixels_p]
  mov	r9, rcx
  mov	rax, SCREEN_WIDTH*4
  mul	rcx
  add	rdi, rax
; rdi is the destination in the pixels_p

  mov	rax, [yscroll]
  add	r9, rax				; r9 = beam y-position with yscroll added

; we delen door 16 om de screentext character te kunnen bepalen.
  mov	rax, r9
  shr	rax, 4
  mov	rcx, GC_Screen_TextColumns
  mul	rcx
  add	rax, [screentext1_p]
  mov	r10, rax			; r10 = ScreenTextPtr offset our character
  and	r9d, 0fh			; r9 is the amount of y pixels within the character down.

  xor	ecx, ecx
  mov	r8, [xscroll]
.loop:
  mov	rsi, [font256_p]
  xor	eax, eax
  mov	al, [r10]			; r10 = ScreenTextPtr offset our character
  shl	rax, 8				; each character is 256 bytes
  add	rsi, rax
  mov	rax, r9				; add the y-offset(r9)
  shl	rax, 4
  add	rsi, rax
  mov	rax, r8				; add the x-offset(r8)
  add	rsi, rax

.samechar_loop:
  xor	eax, eax
  mov	al, [rsi]
  mov	r13, [colortable_p]
  mov	eax, [r13+rax*4]
  mov	[rdi], eax
  inc	rsi
  add	rdi, 4

  inc	ecx
  cmp	ecx, SCREEN_WIDTH
  jz	.exit_loop
  inc	r8d					; next pixel
  cmp	r8d, 16
  jnz	.samechar_loop
  xor	r8d, r8d
  inc	r10					; goto the next screencharacter 
  jmp	.loop
.exit_loop:
  pop	r13 r12 r11 rdi rsi
  mov	rsp, rbp
  pop	rbp
  ret


; In TEXT1_FONT32, we got charactercolors and a colortable. In TEXT1_FONT256, we only have the colortable. In TEXT4_FONT1024, we have no colortable for each pixel is the 4-byte color.
DrawCRTLine_TEXT4_FONT1024:
;rcx = y position to draw (yscroll not added yet)
  push	rbp
  mov	rbp, rsp
  push	rsi rdi r11 r12 r13
  mov	rdi, [pixels_p]
  mov	r9, rcx
  mov	rax, SCREEN_WIDTH*4
  mul	rcx
  add	rdi, rax
; rdi is the destination in the pixels_p

  mov	rax, [yscroll]
  add	r9, rax				; r9 = beam y-position with yscroll added

; we delen door 16 om de screentext character te kunnen bepalen.
  mov	rax, r9
  shr	rax, 4
  mov	rcx, GC_Screen_TextColumns
  shl	rcx, 2				; 4 bytes per textcolumn
  mul	rcx
  add	rax, [screentext4_p]
  mov	r10, rax			; r10 = ScreenTextPtr offset our character
  and	r9d, 0fh			; r9 is the amount of y pixels within the character down.

  xor	ecx, ecx
  mov	r8, [xscroll]
.loop:
  mov	rsi, [font1024_p]
  xor	eax, eax
  mov	eax, [r10]			; r10 = ScreenTextPtr offset our character
  shl	rax, 10				; each character is 1024 bytes
  add	rsi, rax
  mov	rax, r9				; add the y-offset(r9)
  shl	rax, 6				; a char width = 16*4 = 64 bytes
  add	rsi, rax
  mov	rax, r8				; add the x-offset(r8)
  shl	rax, 2
  add	rsi, rax

.samechar_loop:
  mov	eax, [rsi]
  mov	[rdi], eax
  add	rsi, 4
  add	rdi, 4
;  movsd

  inc	ecx
  cmp	ecx, SCREEN_WIDTH
  jz	.exit_loop
  inc	r8d					; next pixel
  cmp	r8d, 16
  jnz	.samechar_loop
  xor	r8d, r8d
  add	r10, 4				; goto the next screencharacter 
  jmp	.loop
.exit_loop:
  pop	r13 r12 r11 rdi rsi
  mov	rsp, rbp
  pop	rbp
  ret


PlotSprite:
;rcx = source
;rdx = destination pixels
;r8  = width
;r9  = height
  push	rsi rdi r10 r15 r14
  mov	r15, [pixels_p]
  mov	rsi, rcx
  mov	rdi, rdx
  mov	r10d, r8d
  shl	r10d, 2
  mov	rdx, SCREEN_WIDTH
  shl	edx, 2
.newLine:
  mov	ecx, 0
@@:
  mov	eax, [rsi+rcx*4]
  cmp	eax, 0h
  je	.skip
  lea	r14, [rdi+rcx*4]
  cmp	r14, r15
  jl	.skip
  mov	[r14], eax
.skip:
  add	ecx, 1
  cmp	ecx, r8d
  jnz	@B
  add	rsi, r10
  add	rdi, rdx
  dec	r9d
  jnz	.newLine
  pop	r14 r15 r10 rdi rsi
  ret

  
source@_f_PlotSprite equ rbp+G_PARAMETER1
destination@_f_PlotSprite equ rbp+G_PARAMETER2
width@_f_PlotSprite equ rbp+G_PARAMETER3
height@_f_PlotSprite equ rbp+G_PARAMETER4
_f_PlotSprite:
;rcx = source
;rdx = destination pixels
;r8  = width
;r9  = height
  push  rbp
  mov   rbp, rsp
  mov   rcx, qword [source@_f_PlotSprite]
  mov   rdx, qword [destination@_f_PlotSprite]
  mov   r8, qword [width@_f_PlotSprite]
  mov   r9, qword [height@_f_PlotSprite]
  push	rsi rdi r10 r15 r14
  mov	r15, [pixels_p]
  mov	rsi, rcx
  mov	rdi, rdx
  mov	r10d, r8d
  shl	r10d, 2
  mov	rdx, SCREEN_WIDTH
  shl	edx, 2
.newLine:
  mov	ecx, 0
@@:
  mov	eax, [rsi+rcx*4]
  cmp	eax, 0h
  je	.skip
  lea	r14, [rdi+rcx*4]
  cmp	r14, r15
  jl	.skip
  mov	[r14], eax
.skip:
  add	ecx, 1
  cmp	ecx, r8d
  jnz	@B
  add	rsi, r10
  add	rdi, rdx
  dec	r9d
  jnz	.newLine
  pop	r14 r15 r10 rdi rsi
  mov   rsp, rbp
  pop   rbp
  retn  G_STACKSPACE_4_PARAM


source@_f_PlotSheetSprite equ rbp+G_PARAMETER1
destination@_f_PlotSheetSprite equ rbp+G_PARAMETER2
width@_f_PlotSheetSprite equ rbp+G_PARAMETER3
height@_f_PlotSheetSprite equ rbp+G_PARAMETER4
sheetwidth@_f_PlotSheetSprite equ rbp+G_PARAMETER5
_f_PlotSheetSprite:
;rcx = source
;rdx = destination pixels
;r8  = width
;r9  = height
;r13 = sheetwidth
  push  rbp
  mov   rbp, rsp
  mov   rcx, qword [source@_f_PlotSheetSprite]
  mov   rdx, qword [destination@_f_PlotSheetSprite]
  mov   r8, qword [width@_f_PlotSheetSprite]
  mov   r9, qword [height@_f_PlotSheetSprite]
  push	rsi rdi r10 r15 r14 r13
  mov   r13, qword [sheetwidth@_f_PlotSheetSprite]
  shl	r13d, 2

  mov	r15, [pixels_p]
  mov	rsi, rcx
  mov	rdi, rdx
  mov	r10d, r8d
  shl	r10d, 2
  mov	rdx, SCREEN_WIDTH
  shl	edx, 2
.newLine:
  mov	ecx, 0
@@:
  mov	eax, [rsi+rcx*4]
  cmp	eax, 0h
  je	.skip
  lea	r14, [rdi+rcx*4]
  cmp	r14, r15
  jl	.skip
  mov	[r14], eax
.skip:
  add	ecx, 1
  cmp	ecx, r8d
  jnz	@B
  add	rsi, r13
  add	rdi, rdx
  dec	r9d
  jnz	.newLine
  pop	r13 r14 r15 r10 rdi rsi
  mov   rsp, rbp
  pop   rbp
  retn  G_STACKSPACE_5_PARAM


section '.idata' import data readable writeable
  library kernel32,'kernel32.dll', \
          user32, 'user32.dll', \
          msvcrt, 'msvcrt.dll', \
		  sdl3, 'SDL3.dll', \
		  sdl3_image, 'SDL3_image.dll', \
		  sidelib, 'GroundSideLibrary.dll', \
		  soloud, 'soloud_x64.dll' 

  include '..\..\..\Include\kernel32_api.inc'
  include '..\..\..\Include\user32_api.inc'
  include '..\..\..\Include\msvcrt_api.inc'
  include '..\..\..\Include\sdl3_api.inc'
  include '..\..\..\Include\sidelib_api.inc'
  include '..\..\..\Include\soloud_api.inc'


section '.data' data readable writeable
Negation_XMM            db 0,0,0,0,0,0,0,80h
                        db 0,0,0,0,0,0,0,80h
main_rbp                dq 0
processHeapHandle		dq 0
GetStdHandle_outputhandle dq 0
GetStdHandle_inputhandle  dq 0

indexSpaceNrElements    dq GC_INDEX_SPACE_NR_ELEMENTS_DEFAULT
indexSpacePointer		dq 0        ; Pointer to the start of the memory
indexSpaceMax           dq 0        ; Maximum pointer
indexSpaceLevel         dq 0        ; Below the level, everything is occupied. So, when freeing up an index space the level must be adjusted.

variableSpaceSize		dq 0
variableSpacePointer	dq 0
variableSpaceNeedle		dq 0

referenceSpaceNrElements  dq GC_REFERENCE_SPACE_NR_ELEMENTS_DEFAULT
referenceSpacePointer	dq 0
referenceSpaceMax       dq 0
referenceSpaceLevel     dq 0        ; Below the level, everything is occupied. So, when freeing up an referenceSpace the level must be adjusted.

currentExeDir           dq 0    ; the index for the currentExeDir, which is zero.
currentExeDirChars      db 256 dup(0)

tmpCharSpace            db 256 dup(0)

align 8

ResultBytesWritten      dq 0
ResultBytesRead         dq 0
LockObject64            dq 0

scanf_int_result        dq 0
scanf_int_read          db '%d',0
scanf_string_read       db '%s',0
sprintf_float_template  db '%.10f',0 
readalltext_openmode    db 'rb',0
bool_true_tostring      db 'true',0
bool_false_tostring     db 'false',0

carriage_return_bytes	db 13,10,0
leak_message			db 13,10,'*** memoryleak! ***',0
assert_errormessage	    db 13,10,'*** ASSERT ERROR ***',13,10,13,10,0
memchecker_message		db 13,10,'Variable memory used (bytes): ',0
indexchecker_message	db 13,10,'Index memory max: %d of total %d elements.',0
refchecker_message		db 13,10,'Reference memory max: %d of total %d elements.',0

align 8

pixels_p			dq 0
next_copperline		dq 0
user_copper_p		dq 0
screentext1_p		dq 0
screentext4_p		dq 0
font32_p			dq 0
font256_p			dq 0
font1024_p			dq 0
colortable_p		dq 0
font32_charcolor_p	dq 0
bg_image_p			dq 0

frameCount		dq 0

oldTicks		dq 0
currentTicks	dq 0
framesPassed	dq 0

cursor_x		dq 0
cursor_y		dq 0

screenmode	dq 0
xscroll		dq 0
yscroll		dq 0
StatusRunning		dq 0
StatusPixelsLocked	dq 0
StatusCrtLinesDrawn	dq 0

; https://codebase64.org/doku.php?id=base:commodore_vic-ii_color_analysis
colorpalette256	dd 0xff000000	; #000000  First 16 colors are C-64 colors.
	dd 0xfff1f1f1	; #ffffff  white
	dd 0xffac4749	; #993322  red
	dd 0xff78d5d0	; #66ddee  cyan
	dd 0xffac49c1	; #aa3399  purple
	dd 0xff5dc158	; #55bb22  green
	dd 0xff4044cb	; #1133aa  blue
	dd 0xffe1e063	; #ffee55  yellow
	dd 0xffaf6821	; #995511  brown
	dd 0xff7E5500	; #663300  dark brown
	dd 0xffd67d7f	; #dd6655  pink
	dd 0xff686868	; #444444  dark grey
	dd 0xff8f8f8f	; #777777  grey
	dd 0xffa0eb9c	; #aaff77  light gren
	dd 0xff8898ff	; #5577ff  light blue
	dd 0xffb9b9b9	; #bbbbbb  light grey
	; https://lospec.com/palette-list/commander-x16-default
	dd 0xff111111,	0xff222222, 0xff333333,	0xff555555,	0xff666666, 0xff888888,	0xff999999,	0xffaaaaaa
	dd 0xffcccccc,	0xffdddddd,	0xffeeeeee,	0xff222233,	0xff443355,	0xff665577,	0xff887799,	0xffaa99bb
	dd 0xffccbbdd,	0xffeeddff,	0xff331133,	0xff442244,	0xff663366,	0xff885588,	0xffaa77aa,	0xffcc88cc
	dd 0xffeeaaee,	0xff441133,	0xff552244,	0xff663355,	0xff774466,	0xff885577,	0xffaa6688,	0xffbb7799
	dd 0xff550000,	0xff881111,	0xffaa3333,	0xffdd5555,	0xffff7788,	0xffffaaaa,	0xffffdddd,	0xff554444
	dd 0xff665566,	0xff886677,	0xff998899,	0xffbb99aa,	0xffddbbcc,	0xffeeccdd,	0xff220000,	0xff331111
	dd 0xff553333,	0xff774444,	0xff996666,	0xffbb8888,	0xffddaaaa,	0xff442211,	0xff553311,	0xff664422
	dd 0xff775533,	0xff886644,	0xff997755,	0xffbb8866,	0xff331100,	0xff553300,	0xff885500,	0xffaa7711
	dd 0xffddaa22,	0xffffdd44,	0xffffff77,	0xff332211,	0xff443333,	0xff665544,	0xff887766,	0xffaa9988
	dd 0xffccbbaa,	0xffffddcc,	0xff221100,	0xff443311,	0xff554422,	0xff776633,	0xff998855,	0xffbbaa77
	dd 0xffddcc99,	0xff223300,	0xff334400,	0xff445511,	0xff666622,	0xff777733,	0xff888844,	0xff999955
	dd 0xff003300,	0xff225500,	0xff447700,	0xff66aa00,	0xff99cc11,	0xffbbff33,	0xffeeff55,	0xff444433
	dd 0xff666644,	0xff777755,	0xff889966,	0xffaaaa88,	0xffcccc99,	0xffddddbb,	0xff001100,	0xff222200
	dd 0xff334411,	0xff556622,	0xff668833,	0xff889955,	0xffaabb77,	0xff113300,	0xff224411,	0xff335511
	dd 0xff446622,	0xff558833,	0xff669944,	0xff77aa55,	0xff004400,	0xff006600,	0xff118811,	0xff33bb22
	dd 0xff55ee44,	0xff88ff77,	0xffaaff99,	0xff223311,	0xff334422,	0xff556644,	0xff778866,	0xff99aa88
	dd 0xffbbccaa,	0xffddeecc,	0xff002200,	0xff114411,	0xff335533,	0xff447744,	0xff669966,	0xff88bb88
	dd 0xffaaddaa,	0xff113322,	0xff114422,	0xff225533,	0xff336644,	0xff448866,	0xff559977,	0xff66aa88
	dd 0xff003322,	0xff005544,	0xff117777,	0xff22aa99,	0xff44cccc,	0xff77ffff,	0xff99ffff,	0xff335544
	dd 0xff446655,	0xff667766,	0xff779988,	0xff99aa99,	0xffaaccbb,	0xffcceedd,	0xff001111,	0xff002222
	dd 0xff224444,	0xff336666,	0xff558877,	0xff669999,	0xff88bbbb,	0xff113344,	0xff224455,	0xff335566
	dd 0xff446677,	0xff557788,	0xff6688aa,	0xff7799bb,	0xff001188,	0xff1133bb,	0xff2255dd,	0xff4477ff
	dd 0xff77aaff,	0xff99ccff,	0xffccffff,	0xff112233,	0xff334455,	0xff556666,	0xff668888,	0xff88aaaa
	dd 0xffaaccdd,	0xffddeeff,	0xff111144,	0xff223355,	0xff334477,	0xff556699,	0xff7788bb,	0xff99aadd
	dd 0xffbbccff,	0xff222255,	0xff333377,	0xff444488,	0xff555599,	0xff6666aa,	0xff7777cc,	0xff8888dd
	dd 0xff220099,	0xff4411cc,	0xff6633ff,	0xff8855ff,	0xffbb77ff,	0xffeeaaff,	0xffffddff,	0xff444466
	dd 0xff555577,	0xff777799,	0xff8888aa,	0xffaaaacc,	0xffbbbbdd,	0xffddddff,	0xff110033,	0xff221155
	dd 0xff443377,	0xff554488,	0xff7766aa,	0xff9988cc,	0xffbb99ee,	0xff331155,	0xff442266,	0xff553377
	dd 0xff664488,	0xff8855aa,	0xff9966bb,	0xffaa77cc,	0xff550055,	0xff770088,	0xff9922aa,	0xffcc44dd
	dd 0xffff66ff,	0xffff99ff,	0xffffbbff,	0xffffddff,	0xffffffff,	0x00000000,	0xff000000, 0xffffffff

align 8

; *** GENERATED DATA ***
;GC_INSERTIONPOINT_DATA
; *** END DATA ***
