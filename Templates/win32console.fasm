format pe64 console
entry start
stack 80000h, 80000h

include 'win64a.inc'
include '..\..\..\Templates\part_equates.fasm'
include '..\..\..\Templates\part_macros.fasm'

; *** GENERATED EQUATES CODE ***
;GC_INSERTIONPOINT_EQUATES

section '.text' code readable executable
start:
  push	rbp
  mov	rbp, rsp
  mov   [main_rbp], rbp

  invoke kernel32_GetStdHandle, STD_OUTPUT_HANDLE
  mov	[GetStdHandle_outputhandle], rax

  invoke kernel32_GetStdHandle, STD_INPUT_HANDLE
  mov	[GetStdHandle_inputhandle], rax

  invoke kernel32_GetProcessHeap
  mov	[processHeapHandle], rax

  mov	rax, 4 * 1024 * 1024
  mov	[variableSpaceSize], rax
  invoke kernel32_HeapAlloc, [processHeapHandle], HEAP_ZERO_MEMORY, [variableSpaceSize]
  mov	[variableSpacePointer], rax
  mov	[variableSpaceNeedle], rax

  mov   rax, [indexSpaceNrElements]
  mov   rdx, GC_INDEXSPACE_ROWSIZE
  mul   rdx
  invoke kernel32_HeapAlloc, [processHeapHandle], HEAP_ZERO_MEMORY, rax
  mov	[indexSpacePointer], rax
  mov	[indexSpaceMax], rax
  mov   [indexSpaceLevel], rax

  mov   rax, [referenceSpaceNrElements]
  mov   rdx, G_REFCOUNT_LINKED_LIST_ROWSIZE
  mul   rdx
  invoke kernel32_HeapAlloc, [processHeapHandle], HEAP_ZERO_MEMORY, rax
  mov	[referenceSpacePointer], rax
  mov	[referenceSpaceMax], rax
  mov	[referenceSpaceLevel], rax


; Set the CurrentExeDir as FixedString at position 0 (zero).
  invoke kernel32_GetModuleFileNameA, 0, currentExeDirChars, 256
  mov	rcx, currentExeDirChars
  call	StringLength    ; rax stringlength
  mov   r8, currentExeDirChars
  mov   rcx, rax
.currentExeDirloop:
  mov   al, byte [r8+rcx]
  cmp   al, '\'
  je    .currentExeDirExitloop
  cmp   al, '/'
  je    .currentExeDirExitloop
  mov   byte [r8+rcx], 0
  dec   rcx
  jnz   .currentExeDirloop
  mov   byte [r8], 0
.currentExeDirExitloop:
  lea   rcx, [currentExeDirChars]   ; index 0
  call  AddFixedString
  lea   rcx, [bool_true_tostring]   ; index 1
  call  AddFixedString
  lea   rcx, [bool_false_tostring]  ; index 2
  call  AddFixedString


; *** GENERATED MAIN CODE ***
;GC_INSERTIONPOINT_MAIN
; *** END MAIN CODE ***


; *** Print the maximum memory used
  lea	rax, [memchecker_message]
  call	PrintScreenString
  mov	rax, [variableSpaceNeedle]
  sub	rax, [variableSpacePointer]
  mov	rcx, 10
  call	PrintNumber

  lea   rcx, [indexchecker_message]
  mov   rdx, [indexSpaceMax]
  sub   rdx, [indexSpacePointer]
  mov   r8, GC_INDEXSPACE_ROWSIZE
  mov   rax, rdx
  xor   edx, edx
  div   r8
  mov   rdx, rax
  mov   r8, [indexSpaceNrElements]
  sub   rsp, 20h
  call  [msvcrt_printf]
  add   rsp, 20h

  lea   rcx, [refchecker_message]
  mov   rdx, [referenceSpaceMax]
  sub   rdx, [referenceSpacePointer]
  mov   r8, G_REFCOUNT_LINKED_LIST_ROWSIZE
  mov   rax, rdx
  xor   edx, edx
  div   r8
  mov   rdx, rax
  mov   r8, [referenceSpaceNrElements]
  sub   rsp, 20h
  call  [msvcrt_printf]
  add   rsp, 20h

; *** Print ' leak!' in case of a memory leak.
  mov	rax, [indexSpacePointer]
  sub	rax, GC_INDEXSPACE_ROWSIZE
.loop:
  add	rax, GC_INDEXSPACE_ROWSIZE
  cmp	qword [rax], 0
  je	.endloop
  mov	rdx, qword [rax+GC_INDEXSPACE_SIZE_OFFSET]
  cmp	rdx, 0
  je	.loop
  mov	rdx, qword [rax+GC_INDEXSPACE_NRREFS_OFFSET]
  cmp	rdx, 0
  je	.loop
  lea	rax, [leak_message]
  call	PrintScreenString
.endloop:

assert_exitpoint:
  invoke kernel32_HeapFree, [processHeapHandle], 0, [referenceSpacePointer]
  invoke kernel32_HeapFree, [processHeapHandle], 0, [indexSpacePointer]
  invoke kernel32_HeapFree, [processHeapHandle], 0, [variableSpacePointer]


  mov	rsp, rbp
  invoke kernel32_ExitProcess, 0
  pop	rbp
  ret



; *** GENERATED PROCEDURES (GROUND FUNCTIONS AND CLASSES) ***
;GC_INSERTIONPOINT_PROCEDURES
; *** END PROCEDURES ***


include '..\..\..\Templates\part_memory.fasm'

PrintScreenString:
;input rax: pointer to string
  push	r8 r9 rcx       ; fastcall 16-byte stack alignment
  mov	r8, rax
  mov	rcx, rax
  call	StringLength
  mov	r9, rax
  invoke kernel32_WriteFile, [GetStdHandle_outputhandle], r8, r9, ResultBytesWritten, NULL
  pop   rcx r9 r8
  ret

ReadChar:
  push	rbp             ; fastcall 16-byte stack alignment
  lea	rax, [tmpCharSpace]
  mov	r8, 1
  invoke kernel32_ReadFile, [GetStdHandle_inputhandle], rax, r8, ResultBytesRead, NULL
  pop	rbp
  ret

include '..\..\..\Templates\part_string.fasm'
include '..\..\..\Templates\part_utils.fasm'
include '..\..\..\Templates\part_hardcoded_library.fasm'



section '.idata' import data readable writeable
  library kernel32,'kernel32.dll', \
          user32, 'user32.dll', \
          gdi32,  'gdi32.dll', \
          msvcrt, 'msvcrt.dll'

  include '..\..\..\Include\kernel32_api.inc'
  include '..\..\..\Include\user32_api.inc'
  include '..\..\..\Include\gdi32_api.inc'
  include '..\..\..\Include\msvcrt_api.inc'


section '.data' data readable writeable
Negation_XMM            db 0,0,0,0,0,0,0,80h
                        db 0,0,0,0,0,0,0,80h
main_rbp                dq 0
processHeapHandle		dq 0
GetStdHandle_outputhandle dq 0
GetStdHandle_inputhandle  dq 0

indexSpaceNrElements    dq GC_INDEX_SPACE_NR_ELEMENTS_DEFAULT
indexSpacePointer		dq 0        ; Pointer to the start of the memory
indexSpaceMax           dq 0        ; Maximum pointer
indexSpaceLevel         dq 0        ; Below the level, everything is occupied. So, when freeing up an index space the level must be adjusted.

variableSpaceSize		dq 0
variableSpacePointer	dq 0
variableSpaceNeedle		dq 0

referenceSpaceNrElements  dq GC_REFERENCE_SPACE_NR_ELEMENTS_DEFAULT
referenceSpacePointer	dq 0
referenceSpaceMax       dq 0
referenceSpaceLevel     dq 0        ; Below the level, everything is occupied. So, when freeing up an referenceSpace the level must be adjusted.

currentExeDir           dq 0    ; the index for the currentExeDir, which is zero.
currentExeDirChars      db 256 dup(0)

tmpCharSpace            db 256 dup(0)

align 8

ResultBytesWritten      dq 0
ResultBytesRead         dq 0
LockObject64            dq 0

scanf_int_result        dq 0
scanf_int_read          db '%d',0
scanf_string_read       db '%s',0
sprintf_float_template  db '%.10f',0 
readalltext_openmode    db 'rb',0
bool_true_tostring      db 'true',0
bool_false_tostring     db 'false',0

carriage_return_bytes	db 13,10,0
leak_message			db 13,10,'*** memoryleak! ***',0
assert_errormessage	    db 13,10,'*** ASSERT ERROR ***',13,10,13,10,0
memchecker_message		db 13,10,'Variable memory used (bytes): ',0
indexchecker_message	db 13,10,'Index memory max: %d of total %d elements.',0
refchecker_message		db 13,10,'Reference memory max: %d of total %d elements.',0

; *** GENERATED DATA ***
;GC_INSERTIONPOINT_DATA
; *** END DATA ***
